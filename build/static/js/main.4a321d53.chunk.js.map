{"version":3,"sources":["Search.jsx","AddContactForm.jsx","ContactList.jsx","services/contacts.js","Notification.jsx","App.js","index.js"],"names":["Search","searchText","handleSearchText","type","value","onChange","placeholder","aria-label","AddContactForm","handleAddContact","newName","handleTextInput","newNumber","handleNumberInput","onSubmit","e","id","ContactList","searchTerm","persons","handleContactUpdate","handleContactDelete","filter","person","name","toLowerCase","includes","trim","number","map","key","className","onClick","baseURL","getAllContacts","a","request","axios","get","response","data","addContact","newContact","post","updateContact","updatedContactObj","patch","replaceContact","replaceContactObj","put","deleteContact","delete","Notification","messageAndStatus","message","status","console","log","App","useState","setPersons","setNewName","setNewNumber","setSearchText","setMessageAndStatus","useEffect","isComponentMounted","contactOptions","then","receivedContacts","messageTimer","setTimeout","clearTimeout","event","preventDefault","newContactObj","uuidv4","alert","window","confirm","existingPerson","receivedContactObj","catch","err","error","responseContactObj","concat","target","contactToUpdate","updatedName","prompt","updatedNumber","receivedContactData","contactToDelete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a321d53.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Search = ({ searchText, handleSearchText }) => {\r\n  return (\r\n    <>\r\n      <h2>Search</h2>\r\n      <input\r\n        type=\"search\"\r\n        value={searchText}\r\n        onChange={handleSearchText}\r\n        placeholder=\"Search for names or numbers...\"\r\n        aria-label=\"Search for contacts with their names or numbers\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n// import contactOptions from \"./services/contacts\";\r\n\r\nconst AddContactForm = ({\r\n  handleAddContact,\r\n  newName,\r\n  handleTextInput,\r\n  newNumber,\r\n  handleNumberInput,\r\n}) => {\r\n  return (\r\n    <form onSubmit={(e) => handleAddContact(e)}>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={newName}\r\n          onChange={handleTextInput}\r\n          placeholder=\"Add contact's name...\"\r\n          aria-label=\"Add contact's name\"\r\n        />\r\n\r\n        <input\r\n          type=\"tel\"\r\n          value={newNumber}\r\n          onChange={handleNumberInput}\r\n          placeholder=\"Add contact's number...\"\r\n          aria-label=\"Add contact's number\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <button id=\"add-contact\" type=\"submit\">\r\n          Add\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddContactForm;\r\n","import React from \"react\";\r\n\r\nconst ContactList = ({\r\n  searchText,\r\n  persons,\r\n  handleContactUpdate,\r\n  handleContactDelete,\r\n}) => {\r\n  // console.log(persons);\r\n\r\n  const filterContacts = (searchTerm) => {\r\n    // if name matches, return contact with that name OR if number matches, return contact with that number\r\n    let filteredContacts = persons\r\n      .filter((person) =>\r\n        person.name?.toLowerCase().includes(searchTerm.trim())\r\n          ? person.name.toLowerCase().includes(searchTerm.trim())\r\n          : null || person.number.toLowerCase().includes(searchTerm.trim())\r\n          ? person.number.toLowerCase().includes(searchTerm.trim())\r\n          : null\r\n      )\r\n      .map((person) => (\r\n        <li key={person.id}>\r\n          {person.name}: {person.number} <br />\r\n          <button\r\n            className=\"update-btn\"\r\n            onClick={() => handleContactUpdate(person)}\r\n          >\r\n            Update\r\n          </button>\r\n          <button\r\n            className=\"delete-btn\"\r\n            onClick={() => {\r\n              handleContactDelete(person);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ));\r\n\r\n    return filteredContacts;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>Contacts</h2>\r\n      <ul id=\"contacts-list\">{filterContacts(searchText)}</ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import axios from \"axios\";\r\n\r\n// const baseURL = \"http://localhost:3001/api/persons\";\r\nconst baseURL = \"/api/persons\";\r\n\r\nconst getAllContacts = async () => {\r\n  const request = axios.get(baseURL);\r\n  const response = await request;\r\n  return response.data;\r\n};\r\n\r\nconst addContact = async (newContact) => {\r\n  const request = axios.post(baseURL, newContact);\r\n  const response = await request;\r\n  return response.data;\r\n};\r\n\r\nconst updateContact = async (id, updatedContactObj) => {\r\n  const request = axios.patch(`${baseURL}/${id}`, updatedContactObj);\r\n  const response = await request;\r\n  return response.data;\r\n};\r\n\r\nconst replaceContact = async (id, replaceContactObj) => {\r\n  const request = axios.put(`${baseURL}/${id}`, replaceContactObj);\r\n  const response = await request;\r\n  return response.data;\r\n};\r\n\r\nconst deleteContact = async (id) => {\r\n  if (id) {\r\n    const request = axios.delete(`${baseURL}/${id}`);\r\n    const response = await request;\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default {\r\n  getAllContacts,\r\n  addContact,\r\n  updateContact,\r\n  replaceContact,\r\n  deleteContact,\r\n};\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ messageAndStatus }) => {\r\n  const { message, status } = messageAndStatus;\r\n  console.log(message, status);\r\n\r\n  return (\r\n    <div className={`notification-toast ${status}`}>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Search from \"./Search\";\nimport AddContactForm from \"./AddContactForm\";\nimport ContactList from \"./ContactList\";\nimport contactOptions from \"./services/contacts\";\nimport Notification from \"./Notification\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchText, setSearchText] = useState(\"\");\n  const [messageAndStatus, setMessageAndStatus] = useState({\n    message: \"\",\n    status: \"\",\n  });\n\n  useEffect(() => {\n    // to prevent state update on unmounted component\n    let isComponentMounted = true;\n\n    contactOptions\n      .getAllContacts()\n      .then((receivedContacts) =>\n        isComponentMounted ? setPersons(receivedContacts) : null\n      );\n\n    return () => (isComponentMounted = false);\n  }, []);\n\n  useEffect(() => {\n    let messageTimer = setTimeout(() => {\n      setMessageAndStatus({ message: \"\", status: \"\" });\n    }, 5000);\n    return () => clearTimeout(messageTimer);\n  }, [messageAndStatus.status]);\n\n  // Handler Functions\n\n  const handleTextInput = (event) => {\n    // console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n  const handleNumberInput = (event) => {\n    // console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n  const handleSearchText = (event) => {\n    // console.log(event.target.value);\n    setSearchText(event.target.value.toLowerCase());\n  };\n\n  const handleAddContact = (event) => {\n    event.preventDefault();\n\n    const newContactObj = {\n      name: newName.trim(),\n      number: newNumber.trim(),\n      // json-server auto generates and sends ids in response object\n      // so this is not really necessary but I used uuid anyway\n      id: uuidv4(),\n    };\n    for (let person of persons) {\n      if (person.number?.trim() === newContactObj.number) {\n        alert(`This number has already been registered in your phonebook!`);\n        return null;\n      } else if (newContactObj.name === \"\" || newContactObj.number === \"\") {\n        alert(`Contact details cannot be empty!`);\n        return null;\n      } else if (\n        person.name.toLowerCase().trim() === newContactObj.name.toLowerCase()\n      ) {\n        if (\n          window.confirm(\n            `Contact with name \"${newContactObj.name}\" already exists in the phonebook! Replace the old number with this new one?`\n          )\n        ) {\n          let existingPerson = person;\n          return contactOptions\n            .replaceContact(existingPerson.id, {\n              ...person,\n              number: newContactObj.number,\n            })\n            .then((receivedContactObj) => {\n              setPersons(\n                persons.map((person) =>\n                  person.id !== existingPerson.id ? person : receivedContactObj\n                )\n              );\n              setMessageAndStatus({\n                message: `Contact ${existingPerson.name} updated successfully.`,\n                status: \"success\",\n              });\n              setNewName(\"\");\n              setNewNumber(\"\");\n            })\n            .catch((err) => {\n              console.error(err);\n              setMessageAndStatus({\n                message: `Error updating contact ${existingPerson.name}.`,\n                status: \"error\",\n              });\n            });\n        } else return null;\n      }\n    }\n    // add contact to db.json\n    contactOptions\n      .addContact(newContactObj)\n      .then((responseContactObj) => {\n        // console.log(response.data);\n        setPersons(persons.concat(responseContactObj));\n        setMessageAndStatus({\n          message: `Added ${newContactObj.name}!`,\n          status: \"success\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        setMessageAndStatus({\n          message: `Error adding contact.`,\n          status: \"error\",\n        });\n      });\n    // concat to avoid direct state update\n    // to clear the input field after adding new contact name\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const handleContactUpdate = (contactToUpdate) => {\n    if (window.confirm(\"Update this contact?\")) {\n      let updatedName =\n        prompt(\"Update contact name.\", contactToUpdate.name) ||\n        contactToUpdate.name;\n      let updatedNumber =\n        prompt(\"Update contact number.\", contactToUpdate.number) ||\n        contactToUpdate.number;\n      // to make sure fields are not empty\n      if (updatedName.trim() && updatedNumber.trim()) {\n        contactOptions\n          .updateContact(contactToUpdate.id, {\n            // id: person.id,\n            name: updatedName.trim(),\n            number: updatedNumber.trim(),\n          })\n          .then((receivedContactData) => {\n            setPersons(\n              persons.map((person) =>\n                // person.id === contactToUpdate.id ? response.data : person\n                // same but more efficient\n                person.id !== contactToUpdate.id ? person : receivedContactData\n              )\n            );\n            setMessageAndStatus({\n              message: `Contact ${receivedContactData.name} updated successfully.`,\n              status: \"success\",\n            });\n          })\n          .catch((err) => {\n            setMessageAndStatus({\n              message: `Error: contact ${contactToUpdate.name} already removed from server.`,\n              status: \"error\",\n            });\n            console.error(err);\n          });\n      }\n    }\n  };\n\n  const handleContactDelete = (contactToDelete) => {\n    if (window.confirm(`Delete ${contactToDelete.name}?`)) {\n      contactOptions\n        .deleteContact(contactToDelete.id)\n        .then(() => {\n          setPersons(\n            persons.filter((person) => person.id !== contactToDelete.id)\n          );\n          setMessageAndStatus({\n            message: `Contact ${contactToDelete.name} deleted.`,\n            status: \"success\",\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n          setMessageAndStatus({\n            message: `Error deleting contact ${contactToDelete.name}.`,\n            status: \"error\",\n          });\n        });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n\n      <Notification messageAndStatus={messageAndStatus} />\n\n      <AddContactForm\n        handleAddContact={handleAddContact}\n        newName={newName}\n        handleTextInput={handleTextInput}\n        newNumber={newNumber}\n        handleNumberInput={handleNumberInput}\n      />\n      <Search searchText={searchText} handleSearchText={handleSearchText} />\n\n      <ContactList\n        searchText={searchText}\n        persons={persons}\n        handleContactUpdate={handleContactUpdate}\n        handleContactDelete={handleContactDelete}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}